{"version":3,"file":"component---src-templates-blog-post-js-eb1df7ef94e656d7d300.js","mappings":"2KAWA,MA6CMA,EAAYC,EAAAA,EAAAA,QAAcC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2GAM1BC,EAAkBH,EAAAA,EAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,2GAM5BG,EAAcL,EAAAA,EAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,kEAKxBK,EAAsBP,EAAAA,EAAAA,EAAQQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,QAEpC,IAhEYO,KAAO,IAADC,EAAAC,EAChB,MAAMC,GAAOC,EAAAA,EAAAA,gBAAe,cAiBtBC,EAA+B,QAAzBJ,EAAGE,EAAKG,KAAKC,oBAAY,IAAAN,OAAA,EAAtBA,EAAwBI,OACjCG,EAA+B,QAAzBN,EAAGC,EAAKG,KAAKC,oBAAY,IAAAL,OAAA,EAAtBA,EAAwBM,OAEvC,OACEC,EAAAA,cAACnB,EAAS,KACRmB,EAAAA,cAACf,EAAe,KACde,EAAAA,cAACb,EAAW,CACVc,IAAI,sDACJC,IAAI,oBAENF,EAAAA,cAACX,EAAmB,KAClBW,EAAAA,cAAA,KAAGG,KAAI,IAAKJ,aAAM,EAANA,EAAQK,SAAU,aAGjCR,aAAM,EAANA,EAAQS,OACPL,EAAAA,cAAA,SAAG,UACMA,EAAAA,cAAA,cAASJ,EAAOS,MAAc,QAGzCL,EAAAA,cAAA,SAAG,wBACoBA,EAAAA,cAAA,KAAGG,KAAI,IAAKJ,aAAM,EAANA,EAAQO,QAAS,SAAS,cAGnD,C,uHC7ChB,MAwDaC,EAAOC,IAAyC,IAAtCd,MAAQe,eAAgBC,IAAQF,EACrD,OACER,EAAAA,cAACW,EAAAA,EAAG,CACFC,MAAOF,EAAKG,YAAYD,MACxBE,YAAaJ,EAAKG,YAAYC,aAAeJ,EAAKK,SAClD,EAIN,UAjEyBC,IAGlB,IAADC,EAAA,IAFJvB,MAAM,SAAEwB,EAAQ,KAAEC,EAAI,KAAEtB,EAAMY,eAAgBC,GAAM,SACpDU,GACDJ,EACC,MAAMK,GAA6B,QAAjBJ,EAAApB,EAAKC,oBAAY,IAAAmB,OAAA,EAAjBA,EAAmBL,QAAK,QAE1C,OACEZ,EAAAA,cAACsB,EAAAA,EAAM,CAACF,SAAUA,EAAUR,MAAOS,GACjCrB,EAAAA,cAAA,WACEuB,UAAU,YACVC,WAAS,EACTC,SAAS,6BAETzB,EAAAA,cAAA,cACEA,EAAAA,cAAA,MAAI0B,SAAS,YAAYhB,EAAKG,YAAYD,OAC1CZ,EAAAA,cAAA,SAAIU,EAAKG,YAAYc,OAEvB3B,EAAAA,cAAA,WACE4B,wBAAyB,CAAEC,OAAQnB,EAAKoB,MACxCJ,SAAS,gBAEX1B,EAAAA,cAAA,WACAA,EAAAA,cAAA,cACEA,EAAAA,cAACT,EAAAA,EAAG,QAGRS,EAAAA,cAAA,OAAKuB,UAAU,iBACbvB,EAAAA,cAAA,MACE+B,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGXpC,EAAAA,cAAA,UACGkB,GACClB,EAAAA,cAACqC,EAAAA,KAAI,CAACC,GAAIpB,EAASqB,OAAOC,KAAMC,IAAI,QAAO,KACtCvB,EAASL,YAAYD,QAI9BZ,EAAAA,cAAA,UACGmB,GACCnB,EAAAA,cAACqC,EAAAA,KAAI,CAACC,GAAInB,EAAKoB,OAAOC,KAAMC,IAAI,QAC7BtB,EAAKN,YAAYD,MAAM,SAM3B,C","sources":["webpack://gatsby-ayaanlog/./src/components/bio.tsx","webpack://gatsby-ayaanlog/./src/templates/blog-post.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport styled from \"@emotion/styled\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <Container>\n      <GitHubContainer>\n        <GitHubImage\n          src=\"https://avatars.githubusercontent.com/LEEHYUNHO2001\"\n          alt=\"Profile picture\"\n        />\n        <GitHubLinkContainer>\n          <a href={`${social?.github}`}>GitHub</a>\n        </GitHubLinkContainer>\n      </GitHubContainer>\n      {author?.name && (\n        <p>\n          안녕하세요. <strong>{author.name}</strong>입니다.\n        </p>\n      )}\n      <p>\n        Blog는 아직 개설되지 않았습니다. <a href={`${social?.velog}`}>Velog</a>\n        에서 확인해주세요.\n      </p>\n    </Container>\n  )\n}\n\nconst Container = styled.section`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\nconst GitHubContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\nconst GitHubImage = styled.img`\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n`\nconst GitHubLinkContainer = styled.p``\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["Container","styled","_templateObject","_taggedTemplateLiteralLoose","GitHubContainer","_templateObject2","GitHubImage","_templateObject3","GitHubLinkContainer","_templateObject4","Bio","_data$site$siteMetada","_data$site$siteMetada2","data","useStaticQuery","author","site","siteMetadata","social","React","src","alt","href","github","name","velog","Head","_ref2","markdownRemark","post","Seo","title","frontmatter","description","excerpt","_ref","_site$siteMetadata","previous","next","location","siteTitle","Layout","className","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}